diff -Naur a/libstageplugin/CMakeLists.txt b/libstageplugin/CMakeLists.txt
--- a/libstageplugin/CMakeLists.txt	2008-07-30 20:21:47.000000000 +0200
+++ b/libstageplugin/CMakeLists.txt	2009-07-14 17:29:11.000000000 +0200
@@ -11,6 +11,7 @@
 	     p_fiducial.cc
 	     p_position.cc
 	     p_sonar.cc
+	     p_ir.cc
 	     p_speech.cc
 	     stg_time.cc
 )
diff -Naur a/libstageplugin/p_driver.cc b/libstageplugin/p_driver.cc
--- a/libstageplugin/p_driver.cc	2008-07-30 20:21:47.000000000 +0200
+++ b/libstageplugin/p_driver.cc	2009-07-15 09:24:44.000000000 +0200
@@ -314,7 +314,11 @@
 	case PLAYER_FIDUCIAL_CODE:
 		ifsrc = new InterfaceFiducial( player_addr,  this, cf, section );
 		break;
-			
+
+	case PLAYER_IR_CODE:
+ 	  ifsrc = new InterfaceIr( player_addr,  this, cf, section );
+ 	  break;
+
 	case PLAYER_LASER_CODE:	  
 		ifsrc = new InterfaceLaser( player_addr,  this, cf, section );
 		break;
diff -Naur a/libstageplugin/p_driver.h b/libstageplugin/p_driver.h
--- a/libstageplugin/p_driver.h	2008-07-30 20:21:47.000000000 +0200
+++ b/libstageplugin/p_driver.h	2009-07-15 09:44:27.000000000 +0200
@@ -229,7 +229,18 @@
 			      void * data );
   virtual void Publish( void );
 };
- 
+
+class InterfaceIr : public InterfaceModel
+{
+ public: 
+  InterfaceIr( player_devaddr_t addr, StgDriver* driver, ConfigFile* cf, int section );
+  virtual ~InterfaceIr( void ){ /* TODO: clean up*/ };
+  
+  virtual int ProcessMessage( QueuePointer & resp_queue, 
+			      player_msghdr * hdr, 
+			      void * data );
+  virtual void Publish( void );
+};
 
 class InterfaceBumper : public InterfaceModel
 {
diff -Naur a/libstageplugin/p_ir.cc b/libstageplugin/p_ir.cc
--- a/libstageplugin/p_ir.cc	1970-01-01 01:00:00.000000000 +0100
+++ b/libstageplugin/p_ir.cc	2009-07-15 09:25:35.000000000 +0200
@@ -0,0 +1,144 @@
+/*
+ *  Player - One Hell of a Robot Server
+ *  Copyright (C) 2004, 2005 Richard Vaughan
+ *                      
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+/*
+ * Desc: A plugin driver for Player that gives access to Stage devices.
+ * Author: Richard Vaughan
+ * Date: 10 December 2004
+ * CVS: $Id: p_ir.cc,v 1.2 2008-01-15 01:25:42 rtv Exp $
+ */
+
+// DOCUMENTATION ------------------------------------------------------------
+
+/** @addtogroup player 
+@par ir interface
+- PLAYER_IR_DATA_RANGES
+- PLAYER_IR_REQ_POSE
+*/
+
+// CODE ----------------------------------------------------------------------
+
+#include "p_driver.h"
+
+//
+// IR INTERFACE
+//
+
+InterfaceIr::InterfaceIr( player_devaddr_t id, 
+				StgDriver* driver,
+				ConfigFile* cf,
+				int section )
+  : InterfaceModel( id, driver, cf, section, MODEL_TYPE_RANGER )
+{
+  //this->data_len = sizeof(player_ir_data_t);
+  //this->cmd_len = 0;
+}
+
+void InterfaceIr::Publish( void )
+{
+  StgModelRanger* mod = (StgModelRanger*)this->mod;
+
+  if( mod->samples == NULL )
+    return;
+
+  player_ir_data_t ir;
+  memset( &ir, 0, sizeof(ir) );
+  
+  size_t sensor_count = mod->sensor_count;
+  
+  if( sensor_count > 0 )
+    {      
+      // limit the number of samples to Player's maximum
+      //if( sensor_count > PLAYER_IR_MAX_SAMPLES )
+      //sensor_count = PLAYER_IR_MAX_SAMPLES;
+      
+      //if( son->power_on ) // set with a ir config
+      {
+	ir.ranges_count = sensor_count;
+	ir.ranges = new float[sensor_count];
+
+	for( unsigned int i=0; i<sensor_count; i++ )
+	  ir.ranges[i] = mod->samples[i];
+      } 
+    }
+  
+  this->driver->Publish( this->addr,
+			 PLAYER_MSGTYPE_DATA,
+			 PLAYER_IR_DATA_RANGES,
+			 &ir, sizeof(ir), NULL); 
+
+  if( ir.ranges )
+    delete[] ir.ranges;
+}
+
+
+int InterfaceIr::ProcessMessage( QueuePointer & resp_queue,
+				     player_msghdr_t* hdr,
+				     void* data )
+{  
+
+  if( Message::MatchMessage(hdr, PLAYER_MSGTYPE_REQ, 
+			    PLAYER_IR_REQ_POSE, 
+			    this->addr) )
+    {
+      StgModelRanger* mod = (StgModelRanger*)this->mod;
+
+      size_t rcount = mod->sensor_count;
+      
+      // limit the number of samples to Player's maximum
+      //if( rcount > PLAYER_IR_MAX_SAMPLES )
+      //rcount = PLAYER_IR_MAX_SAMPLES;
+
+      // convert the ranger data into Player-format ir poses	
+      player_ir_pose_t pgeom;
+      memset( &pgeom, 0, sizeof(pgeom) );
+            
+      pgeom.poses_count = rcount;
+      pgeom.poses = new player_pose3d_t[rcount];
+
+      for( unsigned int i=0; i<rcount; i++ )
+	{
+	  // fill in the geometry data formatted player-like
+	  pgeom.poses[i].px = mod->sensors[i].pose.x;	  
+	  pgeom.poses[i].py = mod->sensors[i].pose.y;	  
+	  pgeom.poses[i].pz = 0;
+	  pgeom.poses[i].ppitch = 0;
+ 	  pgeom.poses[i].proll = 0;
+	  pgeom.poses[i].pyaw = mod->sensors[i].pose.a;	    
+	}
+      
+      this->driver->Publish( this->addr, resp_queue, 
+			     PLAYER_MSGTYPE_RESP_ACK, 
+			     PLAYER_IR_REQ_POSE,
+			     (void*)&pgeom, sizeof(pgeom), NULL );
+
+      delete[] pgeom.poses;      
+      return 0; // ok
+    }
+  else
+    {
+      // Don't know how to handle this message.
+      PRINT_WARN2( "stg_ir doesn't support msg with type/subtype %d/%d",
+		   hdr->type, hdr->subtype);
+      return(-1);
+    }    
+}
+
